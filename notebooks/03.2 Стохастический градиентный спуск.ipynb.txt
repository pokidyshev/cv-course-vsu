{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для тестирования различных вариаций алгоритма градиентного спуска была взята выборка рукописных цифр из пакета `scikit-learn`. \n",
    "\n",
    "Выборка представляет собой 1797 примеров: около 180 на каждый из классов, соответствующей одной из цифр от 0 до 9. Каждый объект представляет собой вектор из 64 чисел, отражающих яркость очередного пикселя. Таким образом, если представить его в виде матрицы $8 \\times 8$, то результат можно считать черно-белым изображением (см. рис. 1).\n",
    "\n",
    "Выборку будем считать сбалансированной и не будем применять сложные техники семплирования.\n",
    "\n",
    "Обработаем перед началом работы данные следующим образом: каждое из значений признаков разделим на максимальное значение по всей выборке, и таким образом гарантируем, что размах значений признаков принадлежит отрезку $[0; 1]$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_digits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = load_digits(return_X_y=True)\n",
    "\n",
    "all_labels = sorted(set(y))\n",
    "\n",
    "X /= X.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1797, 64), (1797,))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "k = np.random.randint(len(X))\n",
    "plt.imshow( X[k].reshape(8, 8), cmap='gray' )\n",
    "plt.title( 'Рисунок 1:\\n{}'.format( y[k] ))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Разобьем выборку на две подвыборки: для обучения и валидации, - в пропорции 80:20. Для этого воспользуемся классом `sklearn.model_selection.StratifiedKFold`. Стратификация при разбиении помогает сохранить ту же пропорцию внутри объектов каждого из классов.\n",
    "\n",
    "После разбиения к каждой из меток $0..9$ целевой переменной применим one-hot-кодирование."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.preprocessing import label_binarize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "skf = StratifiedKFold(n_splits=5, random_state=69)\n",
    "\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "    X_train, X_valid = X[train_index], X[test_index]\n",
    "    y_train, y_valid = y[train_index], y[test_index]\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = label_binarize(y_train, classes=all_labels)\n",
    "y_valid = label_binarize(y_valid, classes=all_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1433, 64), (1433, 10), (364, 64), (364, 10))"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, y_train.shape, X_valid.shape, y_valid.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Алгоритм стохастического градиентного спуска предполагает обновление параметров модели после обработки каждого нового экземпляра, поэтому здесь и далее алгоритм будет приведен в не-векторизованном виде.\n",
    "\n",
    "Будем пользоваться логистической регрессией как решающей моделью. Обозначим ее матрицу весов за $W$, а матрицу сдвигов за $b$. Тогда для формирования предсказания на очередном примере $x_i$ необходимо вычислить следующее значение:\n",
    "\n",
    "$$\n",
    "\\hat{y} = \\sigma ( x_iW+b )\n",
    "$$\n",
    "\n",
    "$\\sigma$ отвечает за функцию активации, и в рамках представленной задачи используется softmax, представляющая собой обобщение логистической функции для многомерного случая. Функция преобразует вектор $z$ размерности $K$ в вектор $\\sigma$  той же размерности, где каждая координата $\\sigma_i$ полученного вектора представлена вещественным числом в интервале $[0,1]$ и сумма координат равна 1.\n",
    "\n",
    "Координаты $\\sigma_i$ вычисляются следующим образом:\n",
    "\n",
    "$$\n",
    "\\sigma(z)_i = \\frac{e^{z_i}}{\\sum_{k=1}^N e^{z_k}}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "W = np.random.rand(64, 10)*0.6 - 0.3\n",
    "b = np.random.rand(10)*0.4 - 0.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = np.random.randint(len(X))\n",
    "xk = X[k]\n",
    "yk = y[k]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def softmax(v):\n",
    "    return np.exp(v) / np.sum( np.exp(v) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(x, W, b):\n",
    "    return softmax(np.dot(x, W) + b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Воспользуемся случайно проинициализированной моделью регрессии, чтобы получить первые предсказания. Случайность инициализации должна обеспечить качество модели на уровне случайного угадывания, то есть в случае 10 классов точность должна составлять примерно 10%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1433/1433 [00:00<00:00, 14644.00it/s]\n"
     ]
    }
   ],
   "source": [
    "y_trues = []\n",
    "y_preds = []\n",
    "\n",
    "for k in tqdm(range(len(X_train))):\n",
    "    x = X_train[k]\n",
    "    y_true = np.argmax( y_train[k] )\n",
    "    \n",
    "    y_pred = np.argmax( predict(x, W, b) )\n",
    "    \n",
    "    y_trues.append(y_true)\n",
    "    y_preds.append(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.015352407536636426"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_trues, y_preds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для того, чтобы измерять величину ошибки на очередном примере выборки, введем функцию перекрестной энтропии, которая в основном используется в задачах классификации подобного рода. Ее формула выглядит следующим образом:\n",
    "\n",
    "$$\n",
    "H(p,q) = - \\sum_x p(x) \\log q(x) \n",
    "$$\n",
    "\n",
    "В таком виде она может быть применена к дискретным распределениям вероятностей, которые мы и имеем в задаче: с одной стороны, вектор правильного ответа $y_i$ содержит только нули за исключением одной позиции-единицы, а вектор предсказаний $\\hat{y_i}$ после применения softmax в сумме дает единицу и не содержит отрицательных значений."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cross_entropy(y_true, y_pred):\n",
    "    return - np.multiply( y_true, np.log(y_pred) ).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Будем считать величиной потерь на эпоху среднее всех значений перекрестной энтропии по каждому из примеров:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1433/1433 [00:00<00:00, 21256.10it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "2.600609399814025"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "losses = []\n",
    "\n",
    "for i in tqdm(range(len(X_train))):\n",
    "    \n",
    "    x = X_train[i]\n",
    "    y_true = y_train[i]\n",
    "    y_pred = predict(x, W, b)\n",
    "    \n",
    "    loss = cross_entropy(y_true, y_pred)\n",
    "    losses.append(loss)\n",
    "    \n",
    "np.mean(losses)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Во время обучения для каждого из примеров выборки:\n",
    "\n",
    "1. Формируется предсказание.\n",
    "2. Находится величина ошибки с помощью функции перекрёстной энтропии.\n",
    "3. Вычисляется антиградиент функции потерь.\n",
    "4. Параметры модели обновляются.\n",
    "\n",
    "Для выбранной функции потерь - перекрёстной энтропии - обновления весов $W$ и сдвигов $b$ представляют собой:\n",
    "\n",
    "$$\n",
    "W := W - \\eta x_i ( \\hat{y_i} - y_i )\n",
    "$$\n",
    "$$\n",
    "b := b - \\eta ( \\hat{y_i} - y_i )\n",
    "$$\n",
    "\n",
    "$\\eta$ - скорость обучения, принятая за $0.01$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = 0.01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = X[123]\n",
    "y_true = y[123]\n",
    "y_pred = predict(x, W, b)\n",
    "\n",
    "grad_w = - lr * np.dot(x.reshape(-1, 1), (y_true - y_pred).reshape(1, -1))\n",
    "grad_b = - lr * (y_true - y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((64, 10), (64, 10))"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grad_w.shape, W.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((10,), (10,))"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grad_b.shape, b.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [00:07<00:00, 14.01it/s]\n"
     ]
    }
   ],
   "source": [
    "W = np.random.rand(64, 10)*0.6 - 0.3\n",
    "b = np.random.rand(10)*0.4 - 0.2\n",
    "\n",
    "lr = 0.005\n",
    "\n",
    "train_losses = []\n",
    "valid_losses = []\n",
    "\n",
    "for e in tqdm(range(100)):\n",
    "        \n",
    "    losses = []\n",
    "    for i in range( len(X_train) ):\n",
    "\n",
    "        x = X_train[i]\n",
    "        y_true = y_train[i]\n",
    "        y_pred = predict(x, W, b)\n",
    "\n",
    "        loss = cross_entropy(y_true, y_pred)\n",
    "        losses.append(loss)\n",
    "    \n",
    "        grad_w = lr * np.dot(x.reshape(-1, 1), (y_pred - y_true).reshape(1, -1))\n",
    "        grad_b = lr * (y_true - y_pred)\n",
    "        \n",
    "        W -= grad_w\n",
    "        b -= grad_b\n",
    "        \n",
    "    train_losses.append( np.mean(losses) )\n",
    "    \n",
    "    \n",
    "    losses = []\n",
    "    for i in range( len(X_valid) ):\n",
    "\n",
    "        x = X_valid[i]\n",
    "        y_true = y_valid[i]\n",
    "        y_pred = predict(x, W, b)\n",
    "\n",
    "        loss = cross_entropy(y_true, y_pred)\n",
    "        losses.append(loss)\n",
    "        \n",
    "    valid_losses.append( np.mean(losses) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 4))\n",
    "plt.plot(train_losses, label='Train loss')\n",
    "plt.plot(valid_losses, label='Valid loss')\n",
    "plt.legend()\n",
    "plt.title('Learning curve')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Mean cross entropy')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Чтобы вычислить итоговую точность решения, измерим ее на валидационной выборке:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_trues_valid = []\n",
    "y_preds_valid = []\n",
    "\n",
    "for i in range( len(X_valid) ):\n",
    "    x = X_valid[i]\n",
    "    y_true = np.argmax( y_valid[i] )\n",
    "    y_pred = np.argmax( predict(x, W, b) )\n",
    "    \n",
    "    y_trues_valid.append(y_true)\n",
    "    y_preds_valid.append(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.945054945054945"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_trues_valid, y_preds_valid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [00:22<00:00,  4.57it/s]\n"
     ]
    }
   ],
   "source": [
    "W = np.random.rand(64, 10)*0.6 - 0.3\n",
    "b = np.random.rand(10)*0.4 - 0.2\n",
    "\n",
    "W_m = W.copy()\n",
    "b_m = b.copy()\n",
    "vel = np.zeros_like(W_m)\n",
    "momentum = 0.5\n",
    "\n",
    "W_n = W.copy()\n",
    "b_n = b.copy()\n",
    "\n",
    "lr = 0.01\n",
    "\n",
    "train_losses = []\n",
    "train_losses_m = []\n",
    "train_losses_n = []\n",
    "\n",
    "for e in tqdm(range(100)):\n",
    "    \n",
    "    losses = []\n",
    "    losses_m = []\n",
    "    losses_n = []\n",
    "    \n",
    "    for i in range( len(X_train) ):\n",
    "\n",
    "        x = X_train[i]\n",
    "        y_true = y_train[i]\n",
    "        \n",
    "        y_pred = predict(x, W, b)\n",
    "        y_pred_m = predict(x, W_m, b_m)\n",
    "        y_pred_n = predict(x, W_n, b_n)\n",
    "\n",
    "        loss = cross_entropy(y_true, y_pred)\n",
    "        loss_m = cross_entropy(y_true, y_pred_m)\n",
    "        loss_n = cross_entropy(y_true, y_pred_n)\n",
    "        \n",
    "        losses.append(loss)\n",
    "        losses_m.append(loss_m)\n",
    "        losses_n.append(loss_n)\n",
    "    \n",
    "        grad_w = lr * np.dot(x.reshape(-1, 1), (y_pred - y_true).reshape(1, -1))\n",
    "        grad_b = lr * (y_true - y_pred)\n",
    "        W -= grad_w\n",
    "        b -= grad_b\n",
    "        \n",
    "        grad_w_m = np.dot(x.reshape(-1, 1), (y_pred_m - y_true).reshape(1, -1))\n",
    "        vel = momentum * vel  +  lr * grad_w_m\n",
    "        grad_b_m = lr * (y_true - y_pred_m)\n",
    "        W_m -= vel\n",
    "        b_m -= grad_b_m\n",
    "        \n",
    "        W_ahead = W_n - momentum * vel\n",
    "        y_pred_ahead = predict(x, W_ahead, b_n)\n",
    "        grad_w_ahead = np.dot(x.reshape(-1, 1), (y_pred_ahead - y_true).reshape(1, -1))\n",
    "        vel = momentum * vel  +  lr * grad_w_ahead\n",
    "        grad_b_n = lr * (y_true - y_pred_n)\n",
    "        W_n -= vel\n",
    "        b_n -= grad_b_n\n",
    "        \n",
    "    train_losses.append( np.mean(losses) )\n",
    "    train_losses_m.append( np.mean(losses_m) )\n",
    "    train_losses_n.append( np.mean(losses_n) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(train_losses, label='Train loss')\n",
    "plt.plot(train_losses_m, label='Momentum = 0.5', c='purple', lw=1, alpha=0.5)\n",
    "plt.plot(train_losses_m, label='Nesterov (Momentum = 0.5)', c='red', ls='--', lw=1,)\n",
    "plt.legend()\n",
    "plt.title('Learning curve')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Mean cross entropy')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  },
  "toc": {
   "colors": {
    "hover_highlight": "#DAA520",
    "running_highlight": "#FF0000",
    "selected_highlight": "#FFD700"
   },
   "moveMenuLeft": true,
   "nav_menu": {
    "height": "12px",
    "width": "252px"
   },
   "navigate_menu": true,
   "number_sections": true,
   "sideBar": true,
   "threshold": 4,
   "toc_cell": false,
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
